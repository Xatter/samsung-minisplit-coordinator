<style>
    .device-control-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
        border-radius: 15px;
        margin-bottom: 30px;
        text-align: center;
    }
    
    .device-control-header h1 {
        margin: 0;
        font-size: 2.2em;
        font-weight: 700;
    }
    
    .device-control-header p {
        margin: 10px 0 0 0;
        opacity: 0.9;
        font-size: 1.1em;
    }

    .back-button {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border: 1px solid rgba(255, 255, 255, 0.3);
        padding: 10px 20px;
        border-radius: 25px;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        transition: all 0.3s ease;
        margin-bottom: 20px;
    }
    
    .back-button:hover {
        background: rgba(255, 255, 255, 0.3);
        color: white;
        text-decoration: none;
        transform: translateY(-1px);
    }

    .device-status-card {
        background: #f8f9fa;
        border: 2px solid #e9ecef;
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 25px;
        transition: all 0.3s ease;
    }
    
    .device-status-card.online {
        border-color: #28a745;
        background: #f8fff9;
    }
    
    .device-status-card.offline {
        border-color: #dc3545;
        background: #fff8f8;
    }

    .status-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
    }
    
    .status-item {
        text-align: center;
        padding: 15px;
        background: white;
        border-radius: 10px;
        border: 1px solid #e9ecef;
    }
    
    .status-value {
        font-size: 2em;
        font-weight: bold;
        color: #667eea;
        display: block;
    }
    
    .status-label {
        font-size: 0.9em;
        color: #666;
        margin-top: 5px;
    }

    .control-section {
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 25px;
        transition: all 0.3s ease;
    }
    
    .control-section:hover {
        border-color: #667eea;
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
    }
    
    .control-section h3 {
        margin: 0 0 20px 0;
        color: #333;
        font-size: 1.4em;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .power-control {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 10px;
        margin-bottom: 15px;
    }
    
    .power-status {
        font-size: 1.2em;
        font-weight: 600;
    }
    
    .power-status.on {
        color: #28a745;
    }
    
    .power-status.off {
        color: #dc3545;
    }

    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }
    
    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }
    
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
    }
    
    .slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
    }
    
    input:checked + .slider {
        background-color: #28a745;
    }
    
    input:checked + .slider:before {
        transform: translateX(26px);
    }

    .mode-buttons {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 15px;
        margin-bottom: 20px;
    }
    
    .mode-btn {
        padding: 15px 20px;
        border: 2px solid #667eea;
        background: white;
        color: #667eea;
        border-radius: 12px;
        cursor: pointer;
        font-weight: 600;
        font-size: 1em;
        transition: all 0.3s;
        text-align: center;
    }
    
    .mode-btn:hover {
        background: #667eea;
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }
    
    .mode-btn.active {
        background: #667eea;
        color: white;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }

    .temperature-control {
        background: #f8f9fa;
        border-radius: 12px;
        padding: 25px;
    }
    
    .temp-display-large {
        text-align: center;
        margin-bottom: 20px;
    }
    
    .temp-value {
        font-size: 3em;
        font-weight: bold;
        color: #667eea;
        line-height: 1;
    }
    
    .temp-slider-container {
        margin-bottom: 20px;
    }
    
    .temp-slider {
        width: 100%;
        height: 12px;
        border-radius: 6px;
        background: #ddd;
        outline: none;
        -webkit-appearance: none;
    }
    
    .temp-slider::-webkit-slider-thumb {
        appearance: none;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background: #667eea;
        cursor: pointer;
        border: 3px solid white;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
    }
    
    .temp-range-labels {
        display: flex;
        justify-content: space-between;
        color: #666;
        font-size: 0.9em;
        margin-top: 5px;
    }

    .temp-presets {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 10px;
        margin-bottom: 20px;
    }
    
    .preset-btn {
        padding: 12px;
        border: 1px solid #6c757d;
        background: white;
        color: #6c757d;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.2s;
        text-align: center;
    }
    
    .preset-btn:hover {
        background: #6c757d;
        color: white;
        transform: translateY(-1px);
    }

    .custom-command-section {
        background: #f8f9fa;
        border-radius: 12px;
        padding: 25px;
    }
    
    .command-form {
        display: grid;
        gap: 15px;
    }
    
    .command-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
    }
    
    .command-input {
        padding: 12px 15px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 1em;
        transition: border-color 0.3s;
    }
    
    .command-input:focus {
        border-color: #667eea;
        outline: none;
    }
    
    .args-input {
        grid-column: 1 / -1;
    }

    .action-buttons {
        display: flex;
        gap: 15px;
        margin-top: 20px;
    }
    
    .btn-primary {
        background: #28a745;
        color: white;
        border: none;
        padding: 15px 25px;
        border-radius: 10px;
        cursor: pointer;
        font-weight: 600;
        font-size: 1em;
        transition: all 0.3s;
        flex: 1;
    }
    
    .btn-primary:hover {
        background: #218838;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
    }
    
    .btn-secondary {
        background: #6f42c1;
        color: white;
        border: none;
        padding: 15px 25px;
        border-radius: 10px;
        cursor: pointer;
        font-weight: 600;
        font-size: 1em;
        transition: all 0.3s;
        flex: 1;
    }
    
    .btn-secondary:hover {
        background: #5a359a;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(111, 66, 193, 0.3);
    }

    .status-message {
        margin-top: 20px;
        padding: 15px 20px;
        border-radius: 10px;
        font-weight: 500;
        text-align: center;
        transition: all 0.3s ease;
    }
    
    .status-message.success {
        background: #d4edda;
        color: #155724;
        border: 2px solid #c3e6cb;
    }
    
    .status-message.error {
        background: #f8d7da;
        color: #721c24;
        border: 2px solid #f5c6cb;
    }
    
    .status-message.loading {
        background: #fff3cd;
        color: #856404;
        border: 2px solid #ffeaa7;
    }

    .auto-refresh-control {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: #e9ecef;
        padding: 15px 20px;
        border-radius: 10px;
        margin-bottom: 25px;
    }
    
    .refresh-toggle {
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .refresh-btn {
        background: #17a2b8;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.2s;
    }
    
    .refresh-btn:hover {
        background: #138496;
        transform: translateY(-1px);
    }

    .capabilities-info {
        background: #e7f3ff;
        border: 1px solid #b8daff;
        border-radius: 10px;
        padding: 15px;
        margin-top: 20px;
    }
    
    .capabilities-info h4 {
        margin: 0 0 10px 0;
        color: #004085;
    }
    
    .capability-tags {
        display: flex;
        gap: 5px;
        flex-wrap: wrap;
    }
    
    .capability-tag {
        background: #007bff;
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.8em;
    }

    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 2px solid #f3f3f3;
        border-radius: 50%;
        border-top: 2px solid #667eea;
        animation: spin 1s linear infinite;
        margin-right: 10px;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    @media (max-width: 768px) {
        .command-row {
            grid-template-columns: 1fr;
        }
        
        .mode-buttons {
            grid-template-columns: 1fr;
        }
        
        .temp-presets {
            grid-template-columns: repeat(3, 1fr);
        }
        
        .action-buttons {
            flex-direction: column;
        }
    }
</style>

<a href="/admin/devices" class="back-button">
    ← Back to Devices
</a>

<div class="device-control-header">
    <h1><%= device.label || device.name %></h1>
    <p>Manual Device Control • Device ID: <%= device.deviceId %></p>
</div>

<div class="auto-refresh-control">
    <div class="refresh-toggle">
        <input type="checkbox" id="auto-refresh" checked>
        <label for="auto-refresh">Auto-refresh (5s)</label>
    </div>
    <button class="refresh-btn" onclick="refreshDeviceStatus()" id="refresh-btn">
        <span id="refresh-icon">🔄</span> Refresh Now
    </button>
</div>

<!-- Device Status -->
<div class="device-status-card" id="status-card">
    <h3>📊 Current Status</h3>
    <div class="status-row" id="status-display">
        <div class="status-item">
            <span class="status-value" id="current-temp">--°F</span>
            <span class="status-label">Current Temperature</span>
        </div>
        <div class="status-item">
            <span class="status-value" id="target-temp">--°F</span>
            <span class="status-label">Target Temperature</span>
        </div>
        <div class="status-item">
            <span class="status-value" id="current-mode">--</span>
            <span class="status-label">Current Mode</span>
        </div>
        <div class="status-item">
            <span class="status-value" id="power-state">--</span>
            <span class="status-label">Power State</span>
        </div>
    </div>
</div>

<!-- Power Control -->
<div class="control-section">
    <h3>🔌 Power Control</h3>
    <div class="power-control">
        <div>
            <div class="power-status" id="power-display">Power: Unknown</div>
        </div>
        <label class="switch">
            <input type="checkbox" id="power-toggle" onchange="setPower()">
            <span class="slider"></span>
        </label>
    </div>
</div>

<!-- Mode Control -->
<div class="control-section">
    <h3>🌡️ Mode Control</h3>
    <div class="mode-buttons">
        <button class="mode-btn" data-mode="off" onclick="setMode('off')">
            🔴 Off
        </button>
        <button class="mode-btn" data-mode="heat" onclick="setMode('heat')">
            🔥 Heat
        </button>
        <button class="mode-btn" data-mode="cool" onclick="setMode('cool')">
            ❄️ Cool
        </button>
    </div>
</div>

<!-- Temperature Control -->
<div class="control-section">
    <h3>🌡️ Temperature Control</h3>
    <div class="temperature-control">
        <div class="temp-display-large">
            <div class="temp-value" id="temp-slider-display">72°F</div>
        </div>
        
        <div class="temp-slider-container">
            <input type="range" class="temp-slider" id="temp-slider" 
                   min="40" max="90" value="72" 
                   oninput="updateTempDisplay()" 
                   onchange="setTemperature()">
            <div class="temp-range-labels">
                <span>40°F</span>
                <span>90°F</span>
            </div>
        </div>
        
        <div class="temp-presets">
            <button class="preset-btn" onclick="setPresetTemp(60)">60°</button>
            <button class="preset-btn" onclick="setPresetTemp(65)">65°</button>
            <button class="preset-btn" onclick="setPresetTemp(70)">70°</button>
            <button class="preset-btn" onclick="setPresetTemp(75)">75°</button>
            <button class="preset-btn" onclick="setPresetTemp(80)">80°</button>
        </div>
    </div>
</div>

<!-- Custom Command -->
<div class="control-section">
    <h3>⚡ Custom Command Execution</h3>
    <div class="custom-command-section">
        <div class="command-form">
            <div class="command-row">
                <input type="text" class="command-input" id="capability-input" 
                       placeholder="Capability (e.g., switch)" value="switch">
                <input type="text" class="command-input" id="command-input" 
                       placeholder="Command (e.g., on)" value="on">
            </div>
            <input type="text" class="command-input args-input" id="args-input" 
                   placeholder="Arguments (JSON array, e.g., [75] or leave empty)">
        </div>
        <div class="action-buttons">
            <button class="btn-secondary" onclick="executeCustomCommand()">
                Execute Custom Command
            </button>
        </div>
    </div>
</div>

<!-- Device Information -->
<div class="capabilities-info">
    <h4>📋 Device Capabilities</h4>
    <div class="capability-tags">
        <% device.capabilities.forEach(cap => { %>
            <span class="capability-tag"><%= cap.id %></span>
        <% }); %>
    </div>
</div>

<!-- Status Messages -->
<div id="status-message" class="status-message" style="display: none;"></div>

<%
// Set JavaScript for the layout to include
let script = `
const deviceId = ${JSON.stringify(device.deviceId)};
let autoRefreshInterval = null;

// Update UI with device status
function updateDeviceDisplay(status) {
    if (!status || !status.components || !status.components.main) {
        return;
    }
    
    const main = status.components.main;
    const statusCard = document.getElementById('status-card');
    
    // Update current temperature
    if (main.temperatureMeasurement && main.temperatureMeasurement.temperature) {
        const temp = main.temperatureMeasurement.temperature.value;
        const unit = main.temperatureMeasurement.temperature.unit || 'F';
        document.getElementById('current-temp').textContent = `${temp}°${unit}`;
    }
    
    // Update target temperature
    let targetTemp = null;
    if (main.thermostatCoolingSetpoint && main.thermostatCoolingSetpoint.coolingSetpoint) {
        targetTemp = Math.round(main.thermostatCoolingSetpoint.coolingSetpoint.value);
    } else if (main.thermostatHeatingSetpoint && main.thermostatHeatingSetpoint.heatingSetpoint) {
        targetTemp = Math.round(main.thermostatHeatingSetpoint.heatingSetpoint.value);
    }
    
    if (targetTemp) {
        document.getElementById('target-temp').textContent = `${targetTemp}°F`;
        document.getElementById('temp-slider').value = targetTemp;
        updateTempDisplay();
    }
    
    // Update power state
    if (main.switch && main.switch.switch) {
        const powerState = main.switch.switch.value;
        const powerToggle = document.getElementById('power-toggle');
        const powerDisplay = document.getElementById('power-display');
        const powerStateDisplay = document.getElementById('power-state');
        
        powerToggle.checked = powerState === 'on';
        powerDisplay.textContent = `Power: ${powerState.toUpperCase()}`;
        powerDisplay.className = `power-status ${powerState}`;
        powerStateDisplay.textContent = powerState.toUpperCase();
        
        statusCard.className = `device-status-card ${powerState === 'on' ? 'online' : 'offline'}`;
    }
    
    // Update mode - handle both thermostat and airConditioner modes
    let currentMode = null;
    if (main.thermostat && main.thermostat.thermostatMode) {
        // Standard thermostat device
        currentMode = main.thermostat.thermostatMode.value;
    } else if (main.airConditionerMode && main.airConditionerMode.airConditionerMode) {
        // Samsung air conditioner device
        const acMode = main.airConditionerMode.airConditionerMode.value;
        // Map Samsung AC modes to standard thermostat modes for UI
        const modeMapping = {
            'cool': 'cool',
            'heat': 'heat',
            'auto': 'auto',
            'wind': 'fan',
            'dry': 'dry',
            'off': 'off'
        };
        currentMode = modeMapping[acMode] || acMode;
    }
    
    if (currentMode) {
        document.getElementById('current-mode').textContent = currentMode.toUpperCase();
        
        // Update mode buttons - only show supported modes for this device
        const modeButtons = document.querySelectorAll('.mode-btn');
        modeButtons.forEach(btn => {
            const btnMode = btn.dataset.mode;
            // For Samsung devices, map UI modes back to AC modes for comparison
            let isActive = false;
            if (main.airConditionerMode) {
                const reverseMapping = {
                    'cool': 'cool',
                    'heat': 'heat',
                    'off': 'off'
                };
                const targetAcMode = reverseMapping[btnMode] || btnMode;
                isActive = main.airConditionerMode.airConditionerMode.value === targetAcMode;
            } else {
                isActive = btnMode === currentMode;
            }
            btn.classList.toggle('active', isActive);
        });
    }
}

// Initialize page
function initializePage() {
    // Use initial status if available, otherwise fetch it
    ${typeof status !== 'undefined' && status ? `
        console.log('Using initial device status from server');
        updateDeviceDisplay(${JSON.stringify(status)});
    ` : `
        console.log('No initial status available, fetching from server');
    `}
    
    // Always fetch fresh status to ensure we have the latest
    refreshDeviceStatus();
    setupAutoRefresh();
}

// Check if DOM is already loaded, otherwise wait for it
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializePage);
} else {
    // DOM is already loaded, run immediately
    initializePage();
}

// Auto-refresh functionality
function setupAutoRefresh() {
    const checkbox = document.getElementById('auto-refresh');
    checkbox.addEventListener('change', () => {
        if (checkbox.checked) {
            startAutoRefresh();
        } else {
            stopAutoRefresh();
        }
    });
    
    if (checkbox.checked) {
        startAutoRefresh();
    }
}

function startAutoRefresh() {
    stopAutoRefresh();
    autoRefreshInterval = setInterval(() => {
        refreshDeviceStatus(true);
    }, 5000);
}

function stopAutoRefresh() {
    if (autoRefreshInterval) {
        clearInterval(autoRefreshInterval);
        autoRefreshInterval = null;
    }
}

// Device status refresh
async function refreshDeviceStatus(silent = false) {
    const refreshBtn = document.getElementById('refresh-btn');
    const refreshIcon = document.getElementById('refresh-icon');
    
    if (!silent) {
        refreshBtn.disabled = true;
        refreshIcon.innerHTML = '<span class="loading-spinner"></span>';
    }
    
    try {
        const response = await fetch(`/admin/device/${deviceId}/status`);
        if (!response.ok) {
            throw new Error('Failed to get device status');
        }
        
        const status = await response.json();
        updateDeviceDisplay(status);
        
        if (!silent) {
            showStatus('Device status refreshed', 'success');
        }
    } catch (error) {
        console.error('Error refreshing device status:', error);
        if (!silent) {
            showStatus('Failed to refresh device status', 'error');
        }
    } finally {
        if (!silent) {
            refreshBtn.disabled = false;
            refreshIcon.textContent = '🔄';
        }
    }
}

// Control functions
async function setPower() {
    const toggle = document.getElementById('power-toggle');
    const state = toggle.checked ? 'on' : 'off';
    
    await executeCommand(`/admin/device/${deviceId}/control/power`, { state }, 
        `Power ${state.toUpperCase()}`);
}

async function setMode(mode) {
    await executeCommand(`/admin/device/${deviceId}/control/mode`, { mode }, 
        `Mode: ${mode.toUpperCase()}`);
}

function updateTempDisplay() {
    const slider = document.getElementById('temp-slider');
    const display = document.getElementById('temp-slider-display');
    display.textContent = `${slider.value}°F`;
}

async function setTemperature() {
    const slider = document.getElementById('temp-slider');
    const temperature = parseInt(slider.value);
    
    await executeCommand(`/admin/device/${deviceId}/control/temperature`, 
        { temperature }, `Temperature: ${temperature}°F`);
}

function setPresetTemp(temp) {
    const slider = document.getElementById('temp-slider');
    slider.value = temp;
    updateTempDisplay();
    setTemperature();
}

async function executeCustomCommand() {
    const capability = document.getElementById('capability-input').value;
    const command = document.getElementById('command-input').value;
    const argsText = document.getElementById('args-input').value;
    
    if (!capability || !command) {
        showStatus('Capability and command are required', 'error');
        return;
    }
    
    let args = [];
    if (argsText.trim()) {
        try {
            args = JSON.parse(argsText);
            if (!Array.isArray(args)) {
                throw new Error('Arguments must be an array');
            }
        } catch (error) {
            showStatus(`Invalid arguments format: ${error.message}`, 'error');
            return;
        }
    }
    
    await executeCommand(`/admin/device/${deviceId}/control/command`, 
        { capability, command, arguments: args }, 
        `${capability}.${command}(${JSON.stringify(args)})`);
}

// Generic command executor
async function executeCommand(url, data, description) {
    try {
        showStatus(`Executing: ${description}...`, 'loading');
        
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });
        
        if (response.ok) {
            showStatus(`✅ Success: ${description}`, 'success');
            // Refresh device status after successful command
            setTimeout(() => refreshDeviceStatus(true), 1000);
        } else {
            const error = await response.text();
            throw new Error(error || 'Unknown error');
        }
    } catch (error) {
        showStatus(`❌ Error: ${error.message}`, 'error');
        console.error('Command execution error:', error);
    }
}

// Status message handling
function showStatus(message, type) {
    const statusDiv = document.getElementById('status-message');
    statusDiv.textContent = message;
    statusDiv.className = `status-message ${type}`;
    statusDiv.style.display = 'block';
    
    if (type !== 'loading') {
        setTimeout(() => {
            statusDiv.style.display = 'none';
        }, 5000);
    }
}

// Cleanup on page unload
window.addEventListener('beforeunload', () => {
    stopAutoRefresh();
});
`; // End of script variable
%>