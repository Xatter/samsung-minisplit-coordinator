<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SmartThings Devices</title>
    <!-- Materialize CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css" rel="stylesheet">
    <style>
        /* Custom styles for the devices page */
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f4f4f9;
            margin: 0;
            padding: 0;
        }
        
        .page-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin: 24px 0;
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .icon {
            font-size: 1.5rem;
        }
        
        .refresh-btn {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.875rem;
            font-weight: 600;
            transition: all 0.2s;
            text-transform: uppercase;
            letter-spacing: 0.025em;
            box-shadow: 0 4px 6px rgba(16, 185, 129, 0.25);
        }
        
        .refresh-btn:hover {
            background: linear-gradient(135deg, #059669 0%, #047857 100%);
            transform: translateY(-1px);
            box-shadow: 0 8px 15px rgba(16, 185, 129, 0.4);
        }
        
        .device-grid {
            margin-top: 24px;
        }
        
        .temperature-display {
            font-size: 3rem;
            font-weight: 800;
            margin: 8px 0;
        }
    </style>
</head>
<body>

<div class="container">
    <div class="section-header">
        <h1 class="page-title">
            <span class="icon">üì±</span>
            SmartThings Devices
        </h1>
        <button class="refresh-btn" onclick="refreshDevices()">
            üîÑ Refresh
        </button>
    </div>

    <% if (locations && locations.length > 0) { %>
        <div class="mb-6">
            <div class="section-title">
                <span class="section-icon">üè†</span>
                <span>Locations</span>
                <span class="device-count"><%= locations.length %> location<%= locations.length !== 1 ? 's' : '' %></span>
            </div>
            <div class="row device-grid">
                <% locations.forEach(location => { %>
                    <div class="col s12 m6 l4">
                        <div class="card hoverable">
                            <div class="card-image">
                                <span class="card-title blue darken-2 white-text"> <%= location.name %> </span>
                            </div>
                            <div class="card-content">
                                <p class="grey-text text-darken-2">Type: SmartThings Location</p>
                                <div class="chip green white-text">
                                    Active
                                </div>
                            </div>
                            <div class="card-action">
                                <a href="/locations/<%= location.locationId %>" class="btn blue">View Details</a>
                            </div>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
    <% } %>

    <% if (Array.isArray(thermostats) && thermostats.length > 0) { %>
        <div class="mb-6">
            <div class="section-title">
                <span class="section-icon">üå°Ô∏è</span>
                <span>Thermostats</span>
                <span class="device-count"><%= thermostats.length %> device<%= thermostats.length !== 1 ? 's' : '' %></span>
            </div>
            <div class="row device-grid">
                <% thermostats.forEach(thermostat => { %>
                    <div class="col s12 m6 l4">
                        <div class="card hoverable" data-device-id="<%= thermostat.deviceId %>">
                            <div class="card-image">
                                <span class="card-title blue darken-2 white-text"> <%= thermostat.label || thermostat.name %> </span>
                            </div>
                            <div class="card-content">
                                <p class="grey-text text-darken-2">Type: Smart Thermostat</p>
                                <div class="chip green white-text">
                                    Online
                                </div>
                                <div class="temperature-display blue-text text-darken-2">
                                    <%= thermostat.temperature %>¬∞C
                                </div>
                            </div>
                            <div class="card-action">
                                <a href="/thermostats/<%= thermostat.deviceId %>" class="btn blue">View Details</a>
                            </div>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
    <% } %>

    <% if (Array.isArray(switches) && switches.length > 0) { %>
        <div class="mb-6">
            <div class="section-title">
                <span class="section-icon">üîå</span>
                <span>Switches</span>
                <span class="device-count"><%= switches.length %> device<%= switches.length !== 1 ? 's' : '' %></span>
            </div>
            <div class="row device-grid">
                <% switches.forEach(switchDevice => { %>
                    <div class="col s12 m6 l4">
                        <div class="card hoverable" data-device-id="<%= switchDevice.deviceId %>">
                            <div class="card-image">
                                <span class="card-title blue darken-2 white-text"> <%= switchDevice.label || switchDevice.name %> </span>
                            </div>
                            <div class="card-content">
                                <p class="grey-text text-darken-2">Type: Smart Switch</p>
                                <div class="chip green white-text">
                                    Online
                                </div>
                            </div>
                            <div class="card-action">
                                <a href="/switches/<%= switchDevice.deviceId %>" class="btn blue">View Details</a>
                            </div>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
    <% } %>

    <% if ((!thermostats || thermostats.length === 0) && (!switches || switches.length === 0)) { %>
        <div class="empty-state">
            <div class="empty-state-icon">‚ö†Ô∏è</div>
            <h4>No Compatible Devices Found</h4>
            <p>No thermostats or switches were found in your SmartThings account. 
               Make sure you have compatible devices added to your SmartThings hub.</p>
        </div>
    <% } %>
</div>

<!-- Materialize JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
<script>
async function refreshDevices() {
    window.location.reload();
}

async function setTemperature(deviceId) {
    const temperature = document.getElementById(`setpoint-${deviceId}`).value;
    try {
        const response = await fetch(`/admin/thermostat/${deviceId}/temperature`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ temperature: parseInt(temperature) })
        });
        
        if (response.ok) {
            showToast('Temperature set successfully', 'success');
            setTimeout(() => loadDeviceStatus(deviceId), 1000);
        } else {
            showToast('Failed to set temperature', 'error');
        }
    } catch (error) {
        showToast('Error setting temperature', 'error');
    }
}

async function setMode(deviceId) {
    const mode = document.getElementById(`mode-${deviceId}`).value;
    try {
        const response = await fetch(`/admin/thermostat/${deviceId}/mode`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ mode })
        });
        
        if (response.ok) {
            showToast('Mode set successfully', 'success');
        } else {
            showToast('Failed to set mode', 'error');
        }
    } catch (error) {
        showToast('Error setting mode', 'error');
    }
}

async function toggleSwitch(deviceId) {
    const checkbox = document.getElementById(`switch-${deviceId}`);
    const state = checkbox.checked ? 'on' : 'off';
    
    try {
        const response = await fetch(`/admin/switch/${deviceId}/toggle`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ state })
        });
        
        if (response.ok) {
            document.getElementById(`switch-state-${deviceId}`).textContent = 
                state.charAt(0).toUpperCase() + state.slice(1);
            showToast('Switch toggled successfully', 'success');
        } else {
            checkbox.checked = !checkbox.checked; // Revert on error
            showToast('Failed to toggle switch', 'error');
        }
    } catch (error) {
        checkbox.checked = !checkbox.checked; // Revert on error
        showToast('Error toggling switch', 'error');
    }
}

async function loadDeviceStatus(deviceId) {
    try {
        const response = await fetch(`/admin/device/${deviceId}/status`);
        if (response.ok) {
            const status = await response.json();
            updateDeviceDisplay(deviceId, status);
        }
    } catch (error) {
        console.error('Error loading device status:', error);
    }
}

function updateDeviceDisplay(deviceId, status) {
    const components = status.components;
    if (components.main) {
        if (components.main.temperatureMeasurement) {
            const temp = components.main.temperatureMeasurement.temperature.value;
            const unit = components.main.temperatureMeasurement.temperature.unit || 'F';
            document.getElementById(`temp-${deviceId}`).textContent = `${temp}¬∞${unit}`;
        }
        
        if (components.main.switch) {
            const switchState = components.main.switch.switch.value;
            const checkbox = document.getElementById(`switch-${deviceId}`);
            const stateLabel = document.getElementById(`switch-state-${deviceId}`);
            
            checkbox.checked = switchState === 'on';
            stateLabel.textContent = switchState.charAt(0).toUpperCase() + switchState.slice(1);
        }
        
        if (components.main.thermostat) {
            const mode = components.main.thermostat.thermostatMode?.value;
            if (mode) {
                document.getElementById(`mode-${deviceId}`).value = mode;
            }
        }
    }
}

function showToast(message, type) {
    // Create enhanced toast notification
    const toast = document.createElement('div');
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        padding: 16px 24px;
        border-radius: 8px;
        font-weight: 600;
        font-size: 0.875rem;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        transform: translateX(100%);
        transition: transform 0.3s ease-in-out;
        max-width: 300px;
    `;
    
    if (type === 'success') {
        toast.style.background = 'linear-gradient(135deg, #10b981 0%, #059669 100%)';
        toast.style.color = 'white';
        toast.innerHTML = `<div style="display: flex; align-items: center; gap: 8px;">‚úÖ ${message}</div>`;
    } else {
        toast.style.background = 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)';
        toast.style.color = 'white';
        toast.innerHTML = `<div style="display: flex; align-items: center; gap: 8px;">‚ùå ${message}</div>`;
    }
    
    document.body.appendChild(toast);
    
    // Animate in
    setTimeout(() => {
        toast.style.transform = 'translateX(0)';
    }, 10);
    
    // Animate out and remove
    setTimeout(() => {
        toast.style.transform = 'translateX(100%)';
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}

// Load initial device status
document.addEventListener('DOMContentLoaded', () => {
    <% if (thermostats) { %>
        <% thermostats.forEach(thermostat => { %>
            loadDeviceStatus('<%= thermostat.deviceId %>');
        <% }); %>
    <% } %>
    
    <% if (switches) { %>
        <% switches.forEach(switchDevice => { %>
            loadDeviceStatus('<%= switchDevice.deviceId %>');
        <% }); %>
    <% } %>
});
</script>
</body>
</html>